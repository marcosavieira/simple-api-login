// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    password,
    email
) VALUES (
    $1, $2, $3
) RETURNING id, username, password, email, created_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserID = `-- name: DeleteUserID :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserID, id)
	return err
}

const deleteUserUsername = `-- name: DeleteUserUsername :exec
DELETE FROM users WHERE username = $1
`

func (q *Queries) DeleteUserUsername(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUserUsername, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, email, created_at FROM users WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password, email, created_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersByUsername = `-- name: GetUsersByUsername :many
SELECT username FROM users WHERE LOWER(username) LIKE CONCAT('%', LOWER($1::text), '%')
`

func (q *Queries) GetUsersByUsername(ctx context.Context, username string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var username string
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
    username = COALESCE($1, username),
    password = COALESCE($2, password),
    email = COALESCE($3, email)
WHERE id = $4
RETURNING id, username, password, email, created_at
`

type UpdateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
